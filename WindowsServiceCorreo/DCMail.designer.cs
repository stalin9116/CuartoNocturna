#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsServiceCorreo
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BDDUIOHELPDESK01")]
	public partial class DCMailDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertTBL_MAILCONFIG(TBL_MAILCONFIG instance);
    partial void UpdateTBL_MAILCONFIG(TBL_MAILCONFIG instance);
    partial void DeleteTBL_MAILCONFIG(TBL_MAILCONFIG instance);
    partial void InsertTBL_MAIL(TBL_MAIL instance);
    partial void UpdateTBL_MAIL(TBL_MAIL instance);
    partial void DeleteTBL_MAIL(TBL_MAIL instance);
    #endregion
		
		public DCMailDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCMailDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCMailDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCMailDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TBL_MAILCONFIG> TBL_MAILCONFIG
		{
			get
			{
				return this.GetTable<TBL_MAILCONFIG>();
			}
		}
		
		public System.Data.Linq.Table<TBL_MAIL> TBL_MAIL
		{
			get
			{
				return this.GetTable<TBL_MAIL>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_MAILCONFIG")]
	public partial class TBL_MAILCONFIG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _mai_id;
		
		private string _mai_servidor;
		
		private int _mai_puerto;
		
		private string _mai_user;
		
		private string _mai_password;
		
		private bool _mai_ssl;
		
		private char _mai_status;
		
		private System.DateTime _mai_add;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onmai_idChanging(int value);
    partial void Onmai_idChanged();
    partial void Onmai_servidorChanging(string value);
    partial void Onmai_servidorChanged();
    partial void Onmai_puertoChanging(int value);
    partial void Onmai_puertoChanged();
    partial void Onmai_userChanging(string value);
    partial void Onmai_userChanged();
    partial void Onmai_passwordChanging(string value);
    partial void Onmai_passwordChanged();
    partial void Onmai_sslChanging(bool value);
    partial void Onmai_sslChanged();
    partial void Onmai_statusChanging(char value);
    partial void Onmai_statusChanged();
    partial void Onmai_addChanging(System.DateTime value);
    partial void Onmai_addChanged();
    #endregion
		
		public TBL_MAILCONFIG()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mai_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int mai_id
		{
			get
			{
				return this._mai_id;
			}
			set
			{
				if ((this._mai_id != value))
				{
					this.Onmai_idChanging(value);
					this.SendPropertyChanging();
					this._mai_id = value;
					this.SendPropertyChanged("mai_id");
					this.Onmai_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mai_servidor", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string mai_servidor
		{
			get
			{
				return this._mai_servidor;
			}
			set
			{
				if ((this._mai_servidor != value))
				{
					this.Onmai_servidorChanging(value);
					this.SendPropertyChanging();
					this._mai_servidor = value;
					this.SendPropertyChanged("mai_servidor");
					this.Onmai_servidorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mai_puerto", DbType="Int NOT NULL")]
		public int mai_puerto
		{
			get
			{
				return this._mai_puerto;
			}
			set
			{
				if ((this._mai_puerto != value))
				{
					this.Onmai_puertoChanging(value);
					this.SendPropertyChanging();
					this._mai_puerto = value;
					this.SendPropertyChanged("mai_puerto");
					this.Onmai_puertoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mai_user", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string mai_user
		{
			get
			{
				return this._mai_user;
			}
			set
			{
				if ((this._mai_user != value))
				{
					this.Onmai_userChanging(value);
					this.SendPropertyChanging();
					this._mai_user = value;
					this.SendPropertyChanged("mai_user");
					this.Onmai_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mai_password", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string mai_password
		{
			get
			{
				return this._mai_password;
			}
			set
			{
				if ((this._mai_password != value))
				{
					this.Onmai_passwordChanging(value);
					this.SendPropertyChanging();
					this._mai_password = value;
					this.SendPropertyChanged("mai_password");
					this.Onmai_passwordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mai_ssl", DbType="Bit NOT NULL")]
		public bool mai_ssl
		{
			get
			{
				return this._mai_ssl;
			}
			set
			{
				if ((this._mai_ssl != value))
				{
					this.Onmai_sslChanging(value);
					this.SendPropertyChanging();
					this._mai_ssl = value;
					this.SendPropertyChanged("mai_ssl");
					this.Onmai_sslChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mai_status", DbType="Char(1) NOT NULL")]
		public char mai_status
		{
			get
			{
				return this._mai_status;
			}
			set
			{
				if ((this._mai_status != value))
				{
					this.Onmai_statusChanging(value);
					this.SendPropertyChanging();
					this._mai_status = value;
					this.SendPropertyChanged("mai_status");
					this.Onmai_statusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mai_add", DbType="DateTime NOT NULL")]
		public System.DateTime mai_add
		{
			get
			{
				return this._mai_add;
			}
			set
			{
				if ((this._mai_add != value))
				{
					this.Onmai_addChanging(value);
					this.SendPropertyChanging();
					this._mai_add = value;
					this.SendPropertyChanged("mai_add");
					this.Onmai_addChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_MAIL")]
	public partial class TBL_MAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _mus_id;
		
		private System.DateTime _mus_fecha;
		
		private string _mus_correo;
		
		private bool _mus_sendstatus;
		
		private bool _mus_errorstatus;
		
		private string _mus_messageerror;
		
		private char _mus_status;
		
		private System.DateTime _mus_add;
		
		private string _mus_nombre;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onmus_idChanging(int value);
    partial void Onmus_idChanged();
    partial void Onmus_fechaChanging(System.DateTime value);
    partial void Onmus_fechaChanged();
    partial void Onmus_correoChanging(string value);
    partial void Onmus_correoChanged();
    partial void Onmus_sendstatusChanging(bool value);
    partial void Onmus_sendstatusChanged();
    partial void Onmus_errorstatusChanging(bool value);
    partial void Onmus_errorstatusChanged();
    partial void Onmus_messageerrorChanging(string value);
    partial void Onmus_messageerrorChanged();
    partial void Onmus_statusChanging(char value);
    partial void Onmus_statusChanged();
    partial void Onmus_addChanging(System.DateTime value);
    partial void Onmus_addChanged();
    partial void Onmus_nombreChanging(string value);
    partial void Onmus_nombreChanged();
    #endregion
		
		public TBL_MAIL()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mus_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int mus_id
		{
			get
			{
				return this._mus_id;
			}
			set
			{
				if ((this._mus_id != value))
				{
					this.Onmus_idChanging(value);
					this.SendPropertyChanging();
					this._mus_id = value;
					this.SendPropertyChanged("mus_id");
					this.Onmus_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mus_fecha", DbType="DateTime NOT NULL")]
		public System.DateTime mus_fecha
		{
			get
			{
				return this._mus_fecha;
			}
			set
			{
				if ((this._mus_fecha != value))
				{
					this.Onmus_fechaChanging(value);
					this.SendPropertyChanging();
					this._mus_fecha = value;
					this.SendPropertyChanged("mus_fecha");
					this.Onmus_fechaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mus_correo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string mus_correo
		{
			get
			{
				return this._mus_correo;
			}
			set
			{
				if ((this._mus_correo != value))
				{
					this.Onmus_correoChanging(value);
					this.SendPropertyChanging();
					this._mus_correo = value;
					this.SendPropertyChanged("mus_correo");
					this.Onmus_correoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mus_sendstatus", DbType="Bit NOT NULL")]
		public bool mus_sendstatus
		{
			get
			{
				return this._mus_sendstatus;
			}
			set
			{
				if ((this._mus_sendstatus != value))
				{
					this.Onmus_sendstatusChanging(value);
					this.SendPropertyChanging();
					this._mus_sendstatus = value;
					this.SendPropertyChanged("mus_sendstatus");
					this.Onmus_sendstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mus_errorstatus", DbType="Bit NOT NULL")]
		public bool mus_errorstatus
		{
			get
			{
				return this._mus_errorstatus;
			}
			set
			{
				if ((this._mus_errorstatus != value))
				{
					this.Onmus_errorstatusChanging(value);
					this.SendPropertyChanging();
					this._mus_errorstatus = value;
					this.SendPropertyChanged("mus_errorstatus");
					this.Onmus_errorstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mus_messageerror", DbType="NVarChar(200)")]
		public string mus_messageerror
		{
			get
			{
				return this._mus_messageerror;
			}
			set
			{
				if ((this._mus_messageerror != value))
				{
					this.Onmus_messageerrorChanging(value);
					this.SendPropertyChanging();
					this._mus_messageerror = value;
					this.SendPropertyChanged("mus_messageerror");
					this.Onmus_messageerrorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mus_status", DbType="Char(1) NOT NULL")]
		public char mus_status
		{
			get
			{
				return this._mus_status;
			}
			set
			{
				if ((this._mus_status != value))
				{
					this.Onmus_statusChanging(value);
					this.SendPropertyChanging();
					this._mus_status = value;
					this.SendPropertyChanged("mus_status");
					this.Onmus_statusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mus_add", DbType="DateTime NOT NULL")]
		public System.DateTime mus_add
		{
			get
			{
				return this._mus_add;
			}
			set
			{
				if ((this._mus_add != value))
				{
					this.Onmus_addChanging(value);
					this.SendPropertyChanging();
					this._mus_add = value;
					this.SendPropertyChanged("mus_add");
					this.Onmus_addChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mus_nombre", DbType="NVarChar(100)")]
		public string mus_nombre
		{
			get
			{
				return this._mus_nombre;
			}
			set
			{
				if ((this._mus_nombre != value))
				{
					this.Onmus_nombreChanging(value);
					this.SendPropertyChanging();
					this._mus_nombre = value;
					this.SendPropertyChanged("mus_nombre");
					this.Onmus_nombreChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
